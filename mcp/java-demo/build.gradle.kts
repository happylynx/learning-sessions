/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.3/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation(platform("io.modelcontextprotocol.sdk:mcp:0.10.0"))
    implementation("io.modelcontextprotocol.sdk:mcp")
    implementation("org.slf4j:slf4j-nop:2.0.16")
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use JUnit Jupiter test framework
            useJUnitJupiter("5.12.1")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}

tasks {
    val copyLibs = register<Copy>("copyLibs") {
        notCompatibleWithConfigurationCache("foo")
        from(configurations.runtimeClasspath)
        into(layout.buildDirectory.dir("dependencies"))
        doLast {
            val dependencies = configurations.runtimeClasspath.get().joinToString(File.pathSeparator) { it.absolutePath }
            val text = "--class-path ${dependencies}\n"
            layout.buildDirectory.file("dependencies/cmd-line.txt").get().asFile.writeText(text)
        }
    }

    classes {
        dependsOn(copyLibs)
    }
}